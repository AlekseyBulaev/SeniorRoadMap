    Use exceptions only for exceptional conditions

    // Horrible abuse of exceptions. Don't ever do this!
    try {
        int i = 0;
        while (true) range[i++].climb();
    } catch (ArrayIndexOutOfBoundsException e) {
    }

    There are three things wrong with this reasoning:
    • Because exceptions are designed for exceptional circumstances, there is little incentive for JVM implementors to make them as fast as explicit tests.
    • Placing code inside a try-catch block inhibits certain optimizations that JVM implementations might otherwise perform.
    • The standard idiom for looping through an array doesn’t necessarily result in redundant checks. Many JVM implementations optimize them away.

!   Exceptions are, as their name implies, to be used only for exceptional conditions; they should never be used for ordinary control flow.
!   A well-designed API must not force its clients to use exceptions for ordinary control flow.

    // Do not use this hideous code for iteration over a collection!
    try {
    Iterator<Foo> i = collection.iterator(); while(true) {
    Foo foo = i.next(); ...
           }
       } catch (NoSuchElementException e) {
       }